<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Author>Mark Software</Author>
<Title>Strings</Title>
<Description>insert Strings</Description>
<Shortcut> stringlib</Shortcut>
</Header>
		<Snippet>
			<Code Language="CPP">
				<![CDATA[
#pragma region Strings
#ifdef _DEBUG // Local library
#include "C:\Users\User\Documents\Visual Studio 2019\StringFunction.h"
#else
// StringFunction.h
// Mark_Pr (c) 2022

#pragma once
#include <stdlib.h>
namespace StringFunction
{
	const char* name = "String functions";
	const char* clnm = "";
	const char* func = "ZFunction; AFunction";

	const char* about = "";
}

#ifndef _STRINGF_
#define _STRINGF_
#include <string>
#include <vector>

namespace std
{
	/// <summary>
	/// Z function
	/// </summary>
	/// <comment>O(N)</comment>
	/// <param name="s">String</param>
	/// <returns>Z list</returns>
	vector <size_t> ZFunction(const string& s)
	{
		size_t n = s.size();
		size_t l = 0, r = 0;
		vector <size_t> z(n);
		for (size_t i = 1; i < n; i++)
		{
			if (i <= r)
				z[i] = min(r - i + 1, z[i - l]);
			while (i + z[i] < n && s[z[i]] == s[i + z[i]])
				z[i]++;
			if (i + z[i] - 1 > r)
			{
				l = i;
				r = i + z[i] - 1;
			}
		}
		return z;
	}

	/// <summary>
	/// A function
	/// </summary>
	/// <comment>O(N)</comment>
	/// <param name="s">String</param>
	/// <returns>A List</returns>
	vector <size_t> AFunction(const string& s)
	{
		size_t n = s.size();
		vector <size_t> a(n);
		for (size_t i = 1; i < n; i++)
		{
			int j = a[i - 1];
			while (j > 0 && s[i] != s[j])
				j = a[j - 1];
			if (s[i] == s[j])  ++j;
			a[i] = j;
		}
		return a;
	}


	template <typename T>
	vector <size_t> AFunction(const vector <T>& s)
	{
		size_t n = s.size();
		vector <size_t> a(n);
		for (size_t i = 1; i < n; i++)
		{
			int j = a[i - 1];
			while (j > 0 && s[i] != s[j])
				j = a[j - 1];
			if (s[i] == s[j])  ++j;
			a[i] = j;
		}
		return a;
	}

	template <typename T>
	vector <size_t> ZFunction(const vector <T>& s)
	{
		size_t n = s.size();
		size_t l = 0, r = 0;
		vector <size_t> z(n);
		for (size_t i = 1; i < n; i++)
		{
			if (i <= r)
				z[i] = min(r - i + 1, z[i - l]);
			while (i + z[i] < n && s[z[i]] == s[i + z[i]])
				z[i]++;
			if (i + z[i] - 1 > r)
			{
				l = i;
				r = i + z[i] - 1;
			}
		}
		return z;
	}
}

#endif
#endif
#pragma endregion
]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>